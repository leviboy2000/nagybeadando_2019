#include <iostream>
#include <fstream>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <string>
#include <list>
#include <unordered_map>


using namespace std;



struct termek
{
    string id;
    string forrashely;
    string celhely;
    string hely;
    int meret;
    bool bepakolva = false;
};

struct kocsi ///vonathoz csatlakoztatható kocsi
{
    string azonosito;
    int kapacitas = 0;
    string allomas;
    string kapcsolt;
    vector<termek> tartalma; ///mi van belepakolva
};

struct vonat ///vonat hova megy
{
    string id;
    int kapacitas;
    string allomas; //kene egy kulon menetrend struct ami egy fv. alapjan valtoztatja az allomast a menetrend szerint
    unordered_map<string,vector<int>> allomasok; /// allomas neve es hogy mikor van ott
    list<kocsi> csatlakoztatott_kocsik;
    bool statusz = true; //a vonat eppen a celhelyre tart(true), vagy vissza a kezdoallomasra (false).
};

void pakol(kocsi &k, termek &t)
{
    int maradek; // fullra pakolja amig tudja, aztan ennyi marad ott
    if(t.meret<=k.kapacitas)
    {
        t.bepakolva = true;
        k.tartalma.push_back(t);
        k.kapacitas-=t.meret;
    }
    else
    {
        //meg kene maradnia a maradeknak
        maradek = t.meret - k.kapacitas;
        t.meret = k.kapacitas;
        t.bepakolva = true;
        k.tartalma.push_back(t);
        k.kapacitas = 0;
        t.meret = maradek;
        t.bepakolva = false;
    }
    for(size_t j = 0; j < k.tartalma.size(); j++)
    {
        cout << "Bepakolva: " << k.tartalma[j].id << ": " << k.tartalma[j].meret << endl;
    }

}
void mittegyek(vector<kocsi> &kocsik,vector<termek> &termekek,vector<vonat> &vonatok, int &ido)
{
    //bepakolas
    for(size_t i = 0; i < kocsik.size(); i++)
    {
        for(size_t j = 0; j < termekek.size(); j++)
        {
            if(kocsik[i].allomas == termekek[j].hely)
            {
                pakol(kocsik[i],termekek[j]);
            }
        }
    }
    //felcsatolas
    for(size_t i = 0; i < vonatok.size(); i++)
    {
        for(size_t j = 0; j < kocsik.size(); j++)
        {

        }
    }
}


/*void kipakol(kocsi &k, termek &t, int &m)
{
    int kipakoltak_szama =0;
    list<termek>::iterator it = k.tartalma.begin();
    while(it!=k.tartalma.end() && kipakoltak_szama <m)
    {
        if(it->id == t.id)
        {
            k.tartalma.erase(it);
            kipakoltak_szama++;
        }
        else
        {
            it++;
        }
    }

}*/

void csatol(vonat &v, kocsi &k)
{
    if (v.csatlakoztatott_kocsik.size() < v.kapacitas)
    {
        v.csatlakoztatott_kocsik.push_back(k);
    }
    else
    {
        cout << "Nem lehet tobb kocsit csatlakoztatni! :(" << endl;
    }
}

void lecsatol(vonat &v, kocsi &k)
{
    list<kocsi>::iterator it = v.csatlakoztatott_kocsik.begin();
    while(it != v.csatlakoztatott_kocsik.end())
    {
        if(it->azonosito == k.azonosito)
        {
            v.csatlakoztatott_kocsik.erase(it);
            break;
        }
    }
}

void beolvas(vector<termek> &termekek, vector<kocsi> &kocsik, vector<vonat> &vonatok)
{
    kocsi k;
    vonat v;
    termek t;


    string azon, kezd, kap;

    ifstream infile("kocsik.txt");
    if (infile.is_open())
    {
        while(infile.good())
        {
            getline(infile,azon,' ');
            k.azonosito = azon;

            getline(infile,kap,' ');
            k.kapacitas = stoi(kap);

            getline(infile,kezd);
            k.allomas = kezd;

            kocsik.push_back(k);

        }
        infile.close();
    }

    else
    {
        cout << "a kocsikat tartalmazo fajlt nem sikerult megnyitni";
    }

    string i, forr, cel, mer;

    ifstream infile2("aruk.txt");
    if (infile2.is_open())
    {
        while(infile2.good())
        {
            getline(infile2,i,' ');
            t.id = i;

            getline(infile2,forr,' ');
            t.forrashely = forr;

            getline(infile2,cel,' ');
            t.celhely = cel;

            getline(infile2,mer);
            t.meret = stoi(mer);

            t.hely = forr;

            termekek.push_back(t);

        }
        infile2.close();
    }

    else
    {
        cout << "az arukat tartalmazo fajlt nem sikerult megnyitni";

    }

    string kapacitas,ido,allomas;
    int ido_szammal;
    map<string,int> all;

    ifstream infile3("menetrend.txt");
    if (infile3.is_open())
    {
        while(infile3.good())
        {
            v.allomasok.clear(); //ha nem tisztitja ki a v-t az elozo vonat idopontjait is belerakja
            getline(infile3,v.id, ' ');
            cout << v.id << " ";
            getline(infile3,kapacitas);
            cout << kapacitas << endl;
            v.kapacitas = stoi(kapacitas);
            getline(infile3,allomas, ' ');
            string elsoallomas = allomas;
            getline(infile3, ido);
            cout << allomas << " " << ido << endl;
            ido_szammal = stoi(ido);
            v.allomasok[allomas].push_back(ido_szammal);
            do ///addig olvassa egy vonat menetrendjét, amíg nincs üres sor (utána a következő jön)
            {
                getline(infile3,allomas, ' ');
                cout << allomas << " ";
                getline(infile3, ido);
                cout << ido << endl;
                ido_szammal = stoi(ido);
                v.allomasok[allomas].push_back(ido_szammal);
            }
            while(allomas!=elsoallomas); //akkor hagyja abba a beolvasast, amikor visszaert a kezdopontba
            vonatok.push_back(v);

        }
        infile3.close();
        cout << endl << "Tomb:" << endl; //innentol az ellenorzo kiiratas
        for(int i = 0; i < vonatok.size(); i++)
        {
            cout << vonatok[i].id << endl;
            for(pair<string, vector<int>> p: vonatok[i].allomasok)
            {
                cout << p.first << " ";
                for(v : p.second)
                {
                    cout << v << " ";
                }
                cout << endl;
            }
        }
    }

    else
    {
        cout << "az arukat tartalmazo fajlt nem sikerult megnyitni";

    }
}

int main()
{
    vector<termek> termekek;
    vector<kocsi> kocsik;
    vector<vonat> vonatok;
    int ido = 0;

    beolvas(termekek, kocsik, vonatok);
    mittegyek(kocsik, termekek, vonatok, ido);

    //int mennyiseg=0; ///mennyi cuccot akarunk bepakolni
    //pakol(k,t,mennyiseg); ///kell egy kocsi, egy termék és hogy mennyit rakjunk bele

    //kipakol(k,t,mennyiseg);

    //csatol(v, k);

    //lecsatol(v,k);

    return 0;
}
